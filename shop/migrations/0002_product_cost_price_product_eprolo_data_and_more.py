# Generated by Django 5.0.2 on 2025-10-20 11:30

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


def check_column_exists(apps, schema_editor, table_name, column_name):
    """Bir sütunun var olup olmadığını kontrol et"""
    from django.db import connection
    cursor = connection.cursor()
    
    # SQLite için
    if connection.vendor == 'sqlite':
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = [row[1] for row in cursor.fetchall()]
        return column_name in columns
    
    # PostgreSQL için
    elif connection.vendor == 'postgresql':
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name=%s AND column_name=%s
        """, [table_name, column_name])
        return cursor.fetchone() is not None
    
    return False


class Migration(migrations.Migration):

    dependencies = [
        ('shop', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Önce mevcut olmayan alanları ekle
        migrations.AddField(
            model_name='product',
            name='cost_price',
            field=models.DecimalField(blank=True, decimal_places=2, help_text="EPROLO'dan gelen tedarikçi fiyatı", max_digits=10, null=True, verbose_name='Maliyet Fiyatı (TL)'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_data',
            field=models.JSONField(blank=True, help_text="EPROLO'dan gelen ham JSON verisi", null=True, verbose_name='EPROLO Ham Veri'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_last_sync',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Son EPROLO Senkronizasyonu'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_product_id',
            field=models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='EPROLO Ürün ID'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_sku',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='EPROLO SKU'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_supplier',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='EPROLO Tedarikçi'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_variant_id',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='EPROLO Varyant ID'),
        ),
        migrations.AddField(
            model_name='product',
            name='eprolo_warehouse',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='EPROLO Depo'),
        ),
        # price_usd alanını eklemeyi atla - zaten var
        # migrations.AddField(
        #     model_name='product',
        #     name='price_usd',
        #     field=models.DecimalField(blank=True, decimal_places=2, help_text='Opsiyonel: USD fiyat', max_digits=10, null=True, verbose_name='Fiyat (USD)'),
        # ),
        migrations.AddField(
            model_name='product',
            name='profit_margin',
            field=models.DecimalField(decimal_places=2, default=Decimal('30.00'), help_text='Satış fiyatına eklenecek kar oranı', max_digits=5, verbose_name='Kar Marjı %'),
        ),
        migrations.AddField(
            model_name='product',
            name='source',
            field=models.CharField(choices=[('manual', 'Manuel Eklendi'), ('eprolo', 'EPROLO')], default='manual', max_length=20, verbose_name='Kaynak'),
        ),
        migrations.AddField(
            model_name='product',
            name='usd_to_try_rate',
            field=models.DecimalField(decimal_places=2, default=Decimal('34.00'), help_text='Kayıt sırasındaki kur', max_digits=6, verbose_name='USD/TL Kuru'),
        ),
        migrations.AlterField(
            model_name='product',
            name='original_price',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='İndirimli Fiyat (TL)'),
        ),
        migrations.AlterField(
            model_name='product',
            name='price',
            field=models.DecimalField(decimal_places=2, help_text="USD fiyat girerseniz otomatik TL'ye çevrilir", max_digits=10, verbose_name='Fiyat (TL)'),
        ),
        migrations.CreateModel(
            name='EproloSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=200, verbose_name='API Key')),
                ('api_secret', models.CharField(blank=True, max_length=200, verbose_name='API Secret')),
                ('use_mock', models.BooleanField(default=True, help_text='Test için mock veriler kullan', verbose_name='Mock Modu Kullan')),
                ('usd_to_try_rate', models.DecimalField(decimal_places=2, default=Decimal('34.50'), max_digits=6, verbose_name='USD/TL Kuru')),
                ('default_profit_margin', models.DecimalField(decimal_places=2, default=Decimal('30.00'), max_digits=5, verbose_name='Varsayılan Kar Marjı %')),
                ('auto_update_prices', models.BooleanField(default=False, verbose_name='Fiyatları Otomatik Güncelle')),
                ('auto_update_stock', models.BooleanField(default=False, verbose_name='Stokları Otomatik Güncelle')),
                ('low_stock_threshold', models.IntegerField(default=5, verbose_name='Düşük Stok Eşiği')),
                ('out_of_stock_threshold', models.IntegerField(default=0, verbose_name='Stok Yok Eşiği')),
                ('auto_create_eprolo_orders', models.BooleanField(default=False, verbose_name="EPROLO'ya Otomatik Sipariş Gönder")),
                ('order_status_for_auto_send', models.CharField(default='confirmed', help_text="Bu duruma gelen siparişler otomatik EPROLO'ya gönderilir", max_length=20, verbose_name='Otomatik Gönderim İçin Sipariş Durumu')),
                ('last_product_sync', models.DateTimeField(blank=True, null=True, verbose_name='Son Ürün Senkronizasyonu')),
                ('last_stock_sync', models.DateTimeField(blank=True, null=True, verbose_name='Son Stok Senkronizasyonu')),
                ('last_price_sync', models.DateTimeField(blank=True, null=True, verbose_name='Son Fiyat Senkronizasyonu')),
                ('notify_on_sync_complete', models.BooleanField(default=True, verbose_name='Senkronizasyon Tamamlandığında Bildir')),
                ('notify_on_sync_error', models.BooleanField(default=True, verbose_name='Senkronizasyon Hatasında Bildir')),
                ('notification_email', models.EmailField(blank=True, max_length=254, verbose_name='Bildirim E-postası')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme')),
                ('default_category', models.ForeignKey(blank=True, help_text='EPROLO ürünleri için varsayılan kategori', null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.category', verbose_name='Varsayılan Kategori')),
            ],
            options={
                'verbose_name': 'EPROLO Ayarları',
                'verbose_name_plural': 'EPROLO Ayarları',
            },
        ),
        migrations.CreateModel(
            name='EproloSyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_type', models.CharField(choices=[('product_import', 'Ürün İçe Aktarma'), ('product_update', 'Ürün Güncelleme'), ('price_update', 'Fiyat Güncelleme'), ('stock_update', 'Stok Güncelleme'), ('order_create', 'Sipariş Oluşturma'), ('order_update', 'Sipariş Güncelleme')], max_length=20, verbose_name='Senkronizasyon Tipi')),
                ('status', models.CharField(choices=[('success', 'Başarılı'), ('failed', 'Başarısız'), ('partial', 'Kısmi Başarılı')], max_length=20, verbose_name='Durum')),
                ('total_items', models.IntegerField(default=0, verbose_name='Toplam Öğe')),
                ('successful_items', models.IntegerField(default=0, verbose_name='Başarılı Öğe')),
                ('failed_items', models.IntegerField(default=0, verbose_name='Başarısız Öğe')),
                ('message', models.TextField(blank=True, verbose_name='Mesaj')),
                ('error_details', models.TextField(blank=True, null=True, verbose_name='Hata Detayları')),
                ('sync_data', models.JSONField(blank=True, null=True, verbose_name='Senkronizasyon Verisi')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Başlangıç')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Tamamlanma')),
                ('duration_seconds', models.IntegerField(blank=True, null=True, verbose_name='Süre (saniye)')),
                ('affected_products', models.ManyToManyField(blank=True, related_name='sync_logs', to='shop.product', verbose_name='Etkilenen Ürünler')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='İşlem Yapan')),
            ],
            options={
                'verbose_name': 'EPROLO Senkronizasyon Logu',
                'verbose_name_plural': 'EPROLO Senkronizasyon Logları',
                'ordering': ['-started_at'],
            },
        ),
    ]
