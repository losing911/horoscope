#!/bin/bash
# Sunucuda Nginx ve Gunicorn'u d√ºzelten script
# Kullanƒ±m: bash fix_nginx_gunicorn.sh

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=========================================${NC}"
echo -e "${BLUE}üîß NGINX & GUNICORN FIX SCRIPT${NC}"
echo -e "${BLUE}=========================================${NC}"
echo ""

# Proje dizinine git
cd /home/django/projects/horoscope

# 1. Log dizini olu≈ütur
echo -e "${YELLOW}üìÅ Log dizini olu≈üturuluyor...${NC}"
mkdir -p logs
sudo chown -R django:www-data logs
sudo chmod -R 755 logs

# 2. Git pull
echo -e "${YELLOW}üì• Son deƒüi≈üiklikler √ßekiliyor...${NC}"
git pull origin main

# 3. Gunicorn servis dosyasƒ±nƒ± kopyala
echo -e "${YELLOW}‚öôÔ∏è  Gunicorn servis dosyasƒ± g√ºncelleniyor...${NC}"
sudo cp gunicorn.service /etc/systemd/system/gunicorn.service
sudo systemctl daemon-reload

# 4. Nginx config dosyasƒ±nƒ± kopyala
echo -e "${YELLOW}‚öôÔ∏è  Nginx config dosyasƒ± g√ºncelleniyor...${NC}"
sudo cp nginx_horoscope.conf /etc/nginx/sites-available/horoscope

# 5. Symbolic link olu≈ütur (varsa √∂nce sil)
echo -e "${YELLOW}üîó Nginx symbolic link olu≈üturuluyor...${NC}"
sudo rm -f /etc/nginx/sites-enabled/horoscope
sudo ln -s /etc/nginx/sites-available/horoscope /etc/nginx/sites-enabled/horoscope

# 6. Default nginx config'i devre dƒ±≈üƒ± bƒ±rak (varsa)
if [ -f /etc/nginx/sites-enabled/default ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Default Nginx config devre dƒ±≈üƒ± bƒ±rakƒ±lƒ±yor...${NC}"
    sudo rm -f /etc/nginx/sites-enabled/default
fi

# 7. Nginx config test
echo -e "${YELLOW}üß™ Nginx konfig√ºrasyon testi...${NC}"
if sudo nginx -t; then
    echo -e "${GREEN}‚úÖ Nginx config ge√ßerli!${NC}"
else
    echo -e "${RED}‚ùå Nginx config hatasƒ±! Kontrol edin:${NC}"
    sudo nginx -t
    exit 1
fi

# 8. Virtual environment aktif et ve migration yap
echo -e "${YELLOW}üêç Migration yapƒ±lƒ±yor...${NC}"
source venv/bin/activate
python manage.py migrate

# 9. Static dosyalarƒ± topla
echo -e "${YELLOW}üìÇ Static dosyalar toplanƒ±yor...${NC}"
python manage.py collectstatic --noinput

# 10. ƒ∞zinleri d√ºzelt
echo -e "${YELLOW}üîí ƒ∞zinler d√ºzenleniyor...${NC}"
sudo chown -R django:www-data /home/django/projects/horoscope
sudo chmod -R 755 /home/django/projects/horoscope
sudo chmod -R 775 /home/django/projects/horoscope/staticfiles
sudo chmod -R 775 /home/django/projects/horoscope/media

# 11. Gunicorn'u yeniden ba≈ülat
echo -e "${YELLOW}üîÑ Gunicorn ba≈ülatƒ±lƒ±yor...${NC}"
sudo systemctl stop gunicorn 2>/dev/null || true
sudo systemctl start gunicorn
sleep 2

if sudo systemctl is-active --quiet gunicorn; then
    echo -e "${GREEN}‚úÖ Gunicorn √ßalƒ±≈üƒ±yor!${NC}"
    sudo systemctl status gunicorn --no-pager -l
else
    echo -e "${RED}‚ùå Gunicorn ba≈ülatƒ±lamadƒ±!${NC}"
    echo "Log kontrol edin:"
    sudo journalctl -u gunicorn -n 50 --no-pager
    exit 1
fi

# 12. Nginx'i yeniden ba≈ülat
echo -e "${YELLOW}üîÑ Nginx ba≈ülatƒ±lƒ±yor...${NC}"
sudo systemctl stop nginx 2>/dev/null || true
sudo systemctl start nginx
sleep 1

if sudo systemctl is-active --quiet nginx; then
    echo -e "${GREEN}‚úÖ Nginx √ßalƒ±≈üƒ±yor!${NC}"
else
    echo -e "${RED}‚ùå Nginx ba≈ülatƒ±lamadƒ±!${NC}"
    echo "Log kontrol edin:"
    sudo tail -n 50 /var/log/nginx/error.log
    exit 1
fi

# 13. Servisleri enable et (otomatik ba≈ülasƒ±n)
echo -e "${YELLOW}‚ö° Servisler otomatik ba≈ülatma i√ßin ayarlanƒ±yor...${NC}"
sudo systemctl enable gunicorn
sudo systemctl enable nginx

# 14. Test et
echo ""
echo -e "${BLUE}=========================================${NC}"
echo -e "${BLUE}üß™ Sƒ∞TE TESTLERƒ∞${NC}"
echo -e "${BLUE}=========================================${NC}"
echo ""

# Ana sayfa testi
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://159.89.108.100/)
if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 301 ] || [ "$HTTP_STATUS" -eq 302 ]; then
    echo -e "${GREEN}‚úÖ Ana Sayfa: OK (HTTP $HTTP_STATUS)${NC}"
else
    echo -e "${RED}‚ùå Ana Sayfa: HATA (HTTP $HTTP_STATUS)${NC}"
fi

# Django Admin testi
HTTP_STATUS_ADMIN=$(curl -s -o /dev/null -w "%{http_code}" http://159.89.108.100/admin/)
if [ "$HTTP_STATUS_ADMIN" -eq 200 ] || [ "$HTTP_STATUS_ADMIN" -eq 302 ]; then
    echo -e "${GREEN}‚úÖ Django Admin: OK (HTTP $HTTP_STATUS_ADMIN)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Django Admin: Kontrol edin (HTTP $HTTP_STATUS_ADMIN)${NC}"
fi

# Custom Admin testi
HTTP_STATUS_CUSTOM=$(curl -s -o /dev/null -w "%{http_code}" http://159.89.108.100/shop/manage/)
if [ "$HTTP_STATUS_CUSTOM" -eq 200 ] || [ "$HTTP_STATUS_CUSTOM" -eq 302 ]; then
    echo -e "${GREEN}‚úÖ Custom Admin: OK (HTTP $HTTP_STATUS_CUSTOM)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Custom Admin: Kontrol edin (HTTP $HTTP_STATUS_CUSTOM)${NC}"
fi

# Static dosyalar testi
HTTP_STATUS_STATIC=$(curl -s -o /dev/null -w "%{http_code}" http://159.89.108.100/static/css/main.css)
if [ "$HTTP_STATUS_STATIC" -eq 200 ]; then
    echo -e "${GREEN}‚úÖ Static Files: OK (HTTP $HTTP_STATUS_STATIC)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Static Files: Kontrol edin (HTTP $HTTP_STATUS_STATIC)${NC}"
fi

# Sonu√ß
echo ""
echo -e "${BLUE}=========================================${NC}"
echo -e "${GREEN}‚úÖ KURULUM TAMAMLANDI!${NC}"
echo -e "${BLUE}=========================================${NC}"
echo ""
echo -e "${GREEN}üìã Servis Durumlarƒ±:${NC}"
sudo systemctl status gunicorn --no-pager | head -3
sudo systemctl status nginx --no-pager | head -3
echo ""
echo -e "${GREEN}üåê Test Edilebilir URL'ler:${NC}"
echo "   ‚Ä¢ Ana Sayfa: http://159.89.108.100/"
echo "   ‚Ä¢ Django Admin: http://159.89.108.100/admin/"
echo "   ‚Ä¢ Custom Admin: http://159.89.108.100/shop/manage/"
echo "   ‚Ä¢ EPROLO Settings: http://159.89.108.100/shop/manage/eprolo/settings/"
echo ""
echo -e "${GREEN}üìä Log Komutlarƒ±:${NC}"
echo "   ‚Ä¢ Gunicorn: sudo journalctl -u gunicorn -f"
echo "   ‚Ä¢ Nginx Access: sudo tail -f /var/log/nginx/horoscope_access.log"
echo "   ‚Ä¢ Nginx Error: sudo tail -f /var/log/nginx/horoscope_error.log"
echo "   ‚Ä¢ Django: tail -f logs/gunicorn_error.log"
echo ""
